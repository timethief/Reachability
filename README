The following is a main idea of this project. For more details, please see bus_trajectory.pdf

1. What does bus trajectory do ?
    This project tries to find out the reachability of bus transit in Los Angeles. Say, it finds out how far a person
in a place can travel within 40 minutes by taking bus and walking in LA.
    To achieve this goal, it first generate two networks. One is a transit network, which is generated by Urbanaccess.
The other one is the pedestrian network, which is generated by Osmnet. Then Urbanaccess integerates these two networks
into one network. All of the following computations are based on this integerated network.
    Bedsides this network, we also need information such as how many jobs each census block have and the shapefiles of
those blocks. These two kind of information could be downloaded from internet.
    With these data, we can calculate how many jobs a person in a place can reach within a given time by taking bus and
walking, or how far we can reach from a block within a given time. Thoese data are generated in json files, which are 
shown through web pages.


2. Dependencies
	python 2.7
	numpy  1.3.1
	pandas 0.20.3
	simpledbf
	shapefile
	urbanaccess 0.1a    
	osmnet 0.1.4
	pandana 0.3.0

3. How to install ?
	1) osmnet 0.1.4
		pip install osmnet
		https://github.com/UDST/osmnet
	2) urbanaccess 0.1a
		https://udst.github.io/urbanaccess/index.html
	3) pandana 0.3.0 
		DO NOT INSTALL VERSION 0.4.0
		http://udst.github.io/pandana/
	4) others
		use	"pip install"

4. Structure

bus_trajectory
├── README
├── input
│   ├── ca_od_main_JT00_2010.csv
│   ├── gtfs_bus/
│   ├── tl_2010_06037_bg10/
│   └── tl_2010_06037_tabblock10/
├── la_urbanaccess.py
└── output
    ├── block_closest_node.csv
    ├── blocks.json
    ├── groups.json
    ├── index.css
    ├── index.html
    ├── index_one_level.html (optional)
    ├── jobs_all_20.csv
    ├── jobs_all_40.csv
    ├── jobs_all_60.csv
    ├── nearest20/
    └── net.h5

5. Input
	All the parameters are set at the beginning of file la_urbanaccess.py
	1) gtfs folder path(absolute path)
		GTFS_PATH = '/Volumes/WD-zqh/bus_trajectory/input/gtfs_bus/'
		set this variable to to your absolute path
	2) dbf file of census block
		DBF_PATH = "./input/tl_2010_06037_tabblock10/tl_2010_06037_tabblock10.dbf"
	3) number of jobs
		JOB_PATH = "./input/ca_od_main_JT00_2010.csv"
	4) shapefile of census block
		SHAPEFILE_PATH = './input/tl_2010_06037_tabblock10/tl_2010_06037_tabblock10'
	5) shapefile of block group
		GROUP_SHAPE_PATH = "./input/tl_2010_06037_bg10/tl_2010_06037_bg10"
	6) Time range
		time_range = ["06:00:00","09:00:00"]
	7) Bounding box
		use one of them, or any bounding box you like.
		a) almost all areas in LA
			bounding_box = (-118.85, 33.67, -117.67, 34.32) # big
		b) a very small region, for test
			bounding_box = (-118.30, 34.0, -118.25, 34.06) # small
	8) Where to download those files?
		a) GTFS
			https://developers.google.com/transit/gtfs/
			or you coubld download it by using Urbanaccess.
		b) Tiger Shapefiles
			https://www.census.gov/geo/maps-data/data/tiger-line.html
		c) Number of jobs
			https://lehd.ces.census.gov/data/
6. Run
	python la_urbanaccess.py

	For small bounding box, it takes less than 10 minutes.
	For big bounding box, it takes many hours.

7. Output
	All the output will be generated in folder output, including the files that are used by those html files.
	1) blocks.json, groups.json, nearest are used by index.html.
	2) block_closest_node.csn, jobs_all_20.csv, jobs_all_40.csv, jobs_all_60.csv are intermediate results.

8. Demo
	1) After running the pragram, we can get some files in the output folder. The index.html will use some of those files. Open with FireFox.
		a) Click a block group, it shows a lower level, the census block level.
		b) Click a census block, it shows all the census block it can reach.
		c) In the census block level, double click, return to the block group level.
	2) If you choose the small bounding box, please open index_one_level.html, which is used for test.
